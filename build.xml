<!--===========================================================================
  This is the build file for the Pentaho Common UI Project

  This build file will use the subfloor.xml file as the default build
  process and should only override the tasks that need to differ from
  the common build file.

  See subfloor.xml for more details
============================================================================-->
<project name="Pentaho Commons UI" basedir="." default="dist"
         xmlns:ivy="antlib:org.apache.ivy.ant">

    <description>
        This build file is used to create the Pentaho Common UI project
        and works with the subfloor.xml file.
    </description>

    <!-- Import the common_build.xml file which contains all the default tasks -->
    <import file="build-res/subfloor-gwt.xml"/>

    <property name="js.module.script.dir" value="package-res/resources/web"/>
    <property name="js.module.script.namespace" value="common-ui"/>
    <property name="include.js.test.folder" value="false" />

    <import file="build-res/subfloor-js.xml"/>

    <!-- property overrides -->
    <property name="js.module.script.dir" value="package-res/resources/web/app/js"/>
    <!-- end property overrides -->

    <property name="js.requires.node" value="true"/>
    <property name="js.requires.karma" value="true"/>
    <property name="js.karma.config" value="config/karma.ci.conf.js"/>
    <property environment="env"/>

    <path id="test.classpath">
        <fileset dir="${devlib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${testlib.dir}">
            <include name="*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}">
            <include name="*.jar"/>
        </fileset>
        <dirset dir="${testclasses.dir}"/>
        <dirset dir="${classes.dir}"/>
    </path>

    <!-- fail message="You do not have XMLTask installed. Please install.">
         <condition>
           <not>
             <available classname="com.oopsconsultancy.xmltask.ant.XmlTask" />
           </not>
         </condition>
       </fail -->

    <property name="dojo-artifact" value="dojo-release-${dependency.dojo.revision}-src"/>

    <property name="dev.res" value="dev-res"/>

    <property name="dojo.root"
              value="${dev.res}/dojo"
              description="Dojo source folder"/>

    <property name="dojo.src"
              value="${dojo.root}/dojo-release-${dependency.dojo.revision}-src"
              description="Dojo source folder"/>

    <property name="dojo.src.release"
              value="${dojo.src}/release/dojo"
              description="Dojo source folder"/>


    <property name="web.prod.stage.dir"
              value="${approot.stage.dir}/resources/web"
              description="production web staging directory"/>

    <property name="dojo.prod.stage.dir"
              value="${web.prod.stage.dir}/dojo"
              description="production dojo staging directory"/>


    <target name="dist" depends="jar, dist-js" description="Creates a distribution">
    </target>

    <!-- sets up the project for development/build, you should only need to run this once -->
    <target name="setup" depends="create-dev.res, resolve, unzip_dojo">
    </target>

    <target name="resolve-and-classpath" depends="resolve,create-dot-classpath">
    </target>

    <target name="create-dev.res">
        <mkdir dir="${dojo.root}"/>
    </target>

    <target name="unzip_dojo" depends="install-antcontrib">
        <if>
            <available file="${dojo.root}/${dojo-artifact}.zip"/>
            <then/>
            <else>
                <mkdir dir="${dojo.root}"/>
            	<ivy:resolve file="${ivyfile}" conf="dojo" />
            	<ivy:retrieve conf="dojo" pattern="${dojo.root}/${dojo-artifact}.zip" />
                <unzip src="${dojo.root}/${dojo-artifact}.zip" dest="${dojo.root}"/>
            </else>
        </if>
    </target>

    <target name="dev-refresh" if="dev.pdi.dir">
        <copy todir="${dev.pdi.dir}/plugins/spoon/agile-bi/platform/pentaho-solutions/system/common-ui"
              overwrite="true">
            <fileset dir="package-res">
                <exclude name="**/pdi-root/**"></exclude>
            </fileset>
        </copy>
    </target>

    <target name="assemble"
            depends="dist,assemble.init,assemble.copy-libs,assemble-plugin">
    </target>

    <target name="package-zip" depends="install-antcontrib">
      <if>
        <equals arg1="${include.js.test.folder}" arg2="true"/>
        <then>
          <zip destfile="${dist.dir}/${package.basename}.zip">
            <zipfileset dir="${stage.dir}"/>
          </zip>
        </then>
        <else>
          <zip destfile="${dist.dir}/${package.basename}.zip">
            <zipfileset dir="${stage.dir}">
              <exclude name="**/test/" />
              <exclude name="**/tests/" />
            </zipfileset>
          </zip>
        </else>
      </if>
    </target>

    <!-- override the subfloor assemble target to do special assembly -->
    <target name="assemble-plugin">

        <property environment="env"/>

        <copy todir="${approot.stage.dir}/resources/web/dojo/dojo" overwrite="true">
            <fileset dir="${dojo.src}/dojo"/>
        </copy>

        <copy todir="${approot.stage.dir}/resources/web/dojo/dijit" overwrite="true">
            <fileset dir="${dojo.src}/dijit"/>
        </copy>
        <copy todir="${approot.stage.dir}/resources/web/dojo/dojox" overwrite="true">
            <fileset dir="${dojo.src}/dojox"/>
        </copy>

        <copy todir="${approot.stage.dir}" overwrite="true">
            <fileset dir="${package.resdir}"/>
        </copy>

        <property environment="env"/>

        <ant antfile="build-res/subfloor-gwt.xml" target="gwt-compile">
            <property name="gwt-module.path" value="org.pentaho.gwt.widgets.themes.Themes"/>
        </ant>

        <ant antfile="build-res/subfloor-gwt.xml" target="gwt-compile">
            <property name="gwt-module.path" value="org.pentaho.gwt.widgets.client.formatter.JSTextFormatter"/>
        </ant>

        <copy todir="${approot.stage.dir}/resources/themes" overwrite="true">
            <fileset dir="${bin.dir}/gwt/output/Themes/themes"/>
        </copy>

        <copy todir="${approot.stage.dir}/resources/web/formatter" overwrite="true">
            <fileset dir="${bin.dir}/gwt/output/formatter"/>
        </copy>

    </target>

    <target name="package-targz">
    </target>

    <!-- Dev targets for updating a server. Set biserver-root in build.properties to use. -->
    <target name="clean-server" if="biserver-root">
        <delete dir="${biserver-root}/pentaho-solutions/system/pentaho-interactive-reporting"/>
    </target>

    <target name="update-server" if="biserver-root"
            depends="clean,dist,assemble.init,package-zip,clean-server"
            description="Update your BIServer with with a full archive build">
        <unzip dest="${biserver-root}/pentaho-solutions/system"
               src="${dist.dir}/${ivy.artifact.id}-${project.revision}-dev.zip"/>
    </target>

    <target name="update-package-res" if="biserver-root"
            description="Update your BIServer with only the contents of package-res/">
        <copy todir="${biserver-root}/pentaho-solutions/system/pentaho-interactive-reporting">
            <fileset dir="${package.resdir}"/>
        </copy>
        <copy todir="${biserver-root}/pentaho-solutions/system/pentaho-interactive-reporting/resources/web/testres"
              file="${dev.res}/runner.html"/>
    </target>


    <target name="plugin-build-jslibs.init">
        <delete dir="${stage.dir}/javascript"/>
        <mkdir dir="${stage.dir}/javascript"/>
    </target>


    <target name="assemble.init">
        <delete dir="${approot.stage.dir}/"/>
        <mkdir dir="${approot.stage.dir}/"/>
    </target>

    <target name="assemble.copy-libs">
        <copy todir="${approot.stage.dir}/lib">
            <fileset file="${dist.dir}/${ivy.artifact.id}-${project.revision}.jar"/>
        </copy>
        <copy todir="${approot.stage.dir}/lib">
            <fileset file="${lib.dir}/flexjson-*.jar"/>
        </copy>
        <copy todir="${approot.stage.dir}/lib">
            <fileset file="${lib.dir}/pentaho-modeler-${dependency.pentaho-modeler.revision}.jar"/>
        </copy>
    </target>

    <target name="publish-nojar" depends="subfloor-js.js.publish-nojar, subfloor-pkg.publish-nojar"/>

    <target name="dist-js">
        <delete dir="bin/js-source"/>
        <copy todir="bin/js-source/${js.module.script.namespace}/dojo">
            <fileset dir="${dojo.src}">
                <include name="**/*"/>
                <exclude name="util/"/>
            </fileset>
        </copy>

        <antcall target="subfloor-js.dist-js"/>
    </target>

    <target name="build-js" depends="cleanup-js-build-dir, subfloor-js.build-js"
            description="Build the JavaScript builds into the compressed and uncompressed versions">
    </target>

    <target name="cleanup-js-build-dir">
        <!-- clean up the output dir for this to avoid pen.define killing the dependency tracing -->
        <delete dir="${js.build.output.dir}/common-ui"/>
    </target>

</project>
